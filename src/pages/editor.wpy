<style lang="less">
  .mainer {
    // width: 200%;
    position: relative;
    height: 100%;
    .audio {
      display: flex;
      flex-direction: row;

      .play_mainer {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 70px;
        width: 36px;
        background-color: grey;
      }
    }

    .words-editor {
      padding-top: 20px;
    }

    .btn-container {
      display: flex;
      flex-direction: row;
      justify-content: flex-end;
      align-items: center;
      position: fixed;
      bottom: 0px;
      left: 0px;
      width: 100%;
      height: 35px;
      background-color: black;
    }
  }

  .section {
    // padding: 10px;
    margin-top: 10px;
  }


</style>

<template>
  <scroll-view class="mainer">
      <view style="padding: 10px; margin-bottom: 40px;">
        <view class="section section_gap audio">
          <view class="play_mainer">
            <image src="../images/icon_play_sigle_blue_128.png" style="height: 20px; width: 20px;" @tap="playVoice"/>
          </view>
          <image src="../images/image_audio_waves.png" style="height: 70px; width: 100%;"></image>
        </view>

        <view class="words-editor">
          <view class="section section_gap" style="display: flex; flex-direction: row;">
            <view style="display:flex; justify-content: center; align-items: center;">
              <image src="{{cover}}" style="width: 100px; height: 100px;" @tap="chooseCover"/>
            </view>
            <view class="section section_gap" style="margin-left: 10px;">
              <input name="input" type="text" @input="titleInput" style="border-bottom-style: solid; border-color: grey; border-width: 1px; height: 20px;" placeholder="输入一个标题"/>
              <view style="padding-top: 10px;">
                <picker-view indicator-style="height: 20px;" style="width: 100%; height: 50px;" value="{{value}}" bindchange="pickNode">
                    <picker-view-column>
                      <repeat for="{{sections}}" key="index" index="index" item="item">
                        <view style="line-height: 20px">{{item.name}}</view>
                      </repeat>
                    </picker-view-column>
                    <picker-view-column>
                      <repeat for="{{nodes}}" key="index" index="index" item="item">
                        <view style="line-height: 20px">{{item.name}}</view>
                      </repeat>
                    </picker-view-column>
                  </picker-view>
              </view>
            </view>
          </view>

          <view class="section section_gap" style="border-bottom-style: solid; border-color: grey; border-width: 1px; padding-top: 10px; padding-bottom: 5px;">
            <view style="width:36px; height:22px; font-size: 12px; background-color: #EEEED1;  display: flex; justify-content: center; align-items: center; border-radius: 2px;">
              <text>+标签</text>
            </view>
          </view>

          <view class="section section_gap">
            <textarea name="textarea" @input="infoInput" style="border-style: solid; border-color: grey; border-width: 1px; width: 100%; height: 260px;" placeholder="写一段奇妙的文字啊"/>
          </view>
        </view>      
      </view>
<!-- 
      <button type="primary" size="{{primarySize}}" loading="{{loading}}" plain="{{plain}}"
              disabled="{{disabled}}" bindtap="saveTopic"> primary </button>
      <button type="warn" size="{{warnSize}}" loading="{{loading}}" plain="{{plain}}"
              disabled="{{disabled}}" bindtap="warn"> warn </button>

 -->
      <view class="btn-container">
        <view style="width: 80px; color: yellow; display: flex;" @tap="saveTopic">x取消</view>

        <view style="width: 80px; color: white; display: flex; justify-content: center; align-items: center;" @tap="saveTopic">
          <text style="text-align: center;">✓发布</text>
        </view>
      </view>
  </scroll-view>
</template>

<script>
import wepy from 'wepy'

import api from '../api/api'
import qiniuUploader from "../utility/qiniuUploader"

export default class Editor extends wepy.page {
  config = {
    navigationBarTitleText: '创造你的世界'
  }

  props = {
  }

  data = {
    uptoken: "",
    upkey: "",
    updomain: "",
    title: "",
    info: "",
    srcFile: "",
    cover: "../images/no_image.png",
    innerAudioContext: null,
    sections: ['生活', '搞笑', '世界', '情感'],
    nodes: ['风声与代码', '治愈'],
    pickedNode: null
  }

  components = {
  }
  computed = {
  }

  methods = {
    playVoice(e) {
      this.innerAudioContext.src = this.srcFile
      this.innerAudioContext.play()
    },
    titleInput(e) {
      this.title = e.detail.value
      this.$apply()
    },
    infoInput(e) {
      this.info = e.detail.value
      this.$apply()
    },
    pickNode(e) {
      const val = e.detail.value
      this.pickNode = this.nodes[val[1]]
      this.$apply()
    },
    chooseCover(e) {
      let that = this
      wepy.chooseImage({
        count: 1, // 设置最多可以选择的图片张数，默认9,如果我们设置了多张,那么接收时//就不在是单个变量了,
        sizeType: ['original', 'compressed'], // original 原图，compressed 压缩图，默认二者都有
        sourceType: ['album', 'camera'] // album 从相册选图，camera 使用相机，默认二者都有
      }).then(res => {
        let filePath = res.tempFilePaths[0]
        console.log(filePath)
        // 交给七牛上传
        qiniuUploader.upload(filePath, (res) => {
          // 每个文件上传成功后,处理相关的事情
          // 其中 info 是文件上传成功后，服务端返回的json，形式如
          // {
          //    "hash": "Fh8xVqod2MQ1mocfI4S4KpRL6D98",
          //    "key": "gogopher.jpg"
          //  }
          // 参考http://developer.qiniu.com/docs/v6/api/overview/up/response/simple-response.html

          that.cover = res.imageURL
          that.$apply()
        }, (error) => {
          console.log('error: ' + error)
        }, {
          region: 'SCN',
          domain: "http://" + this.updomain, // // bucket 域名，下载资源时用到。如果设置，会在 success callback 的 res参数加上可以直接使用的 ImageURL 字段。否则需要自己拼接
          // key: "photos/" + this.upkey, // [非必须]自定义文件 key。如果不设置，默认为使用微信小程序 API 的临时文件名
          // 以下方法三选一即可，优先级为：uptoken > uptokenURL > uptokenFunc
          uptoken: this.uptoken, // 由其他程序生成七牛 uptoken
          uptokenURL: 'UpTokenURL.com/uptoken' // 从指定 url 通过 HTTP GET 获取 uptoken，返回的格式必须是 json 且包含 uptoken 字段，例如： {"uptoken": "[yourTokenString]"}
          // uptokenFunc: => {return '[yourTokenString]'}
        }, (res) => {
          console.log('上传进度', res.progress)
          console.log('已经上传的数据长度', res.totalBytesSent)
          console.log('预期需要上传的数据总长度', res.totalBytesExpectedToSend)
        })
      }).catch((res) => {
        console.log(res)
      })
    },
    saveTopic(e) {
      if (this.cover.length < 1 && this.cover === '../images/no_image.png') {
        wepy.showToast({title: '请传一张封面', icon: 'none'})
        return
      }
      if (this.srcFile.length < 5) {
        wepy.showToast({title: '木有音频源', icon: 'none'})
        return
      }
      if (this.title.length < 5) {
        wepy.showToast({title: '写个标题呗', icon: 'none'})
        return
      }
      if (this.info.length < 5) {
        wepy.showToast({title: '写个介绍呗', icon: 'none'})
        return
      }
      this.saveVoice()
    }
  }
  events = {
  }

  onReady(e) {
    this.innerAudioContext = wepy.createInnerAudioContext()
    this.innerAudioContext.autoplay = false
    this.innerAudioContext.onPlay(() => {
      console.log('开始播放')
    })
    this.innerAudioContext.onError((res) => {
      console.log(res.errMsg)
      console.log(res.errCode)
    })
  }

  onLoad(option) {
    let that = this
    that.srcFile = option.recordFile

    that.fetchNodes()
    that.fetchUptoken()
  }

  async fetchUptoken() {
    const resp = await api.getUptoken()

    this.uptoken = resp.token
    this.upkey = resp.key
    this.updomain = resp.domain
    this.$apply()
  }

  async fetchNodes() {
    const resp = await api.getNodeList()

    this.nodes = resp.nodes

    var m = new Map()
    for (var i = this.nodes.length - 1; i >= 0; i--) {
      m.set(this.nodes[i].section_id, this.nodes[i].section_name)
    }
    let ss = []
    m.forEach((item, key, mapObj) => {
      ss.push({id: key, name: item})
    })

    this.sections = ss
    console.log(this.sections)
    if (this.nodes.length > 0) {
      this.pickNode = this.nodes[0]
    }
    this.$apply()
  }

  async saveVoice() {
    let that = this
    const resp = await api.saveTopic({
      query: {
        cover: that.cover,
        title: that.title,
        body: that.info,
        node_id: that.pickNode.id,
        source: that.srcFile,
        token: this.$root.$parent.globalData.userInfo.token
      }
    })

    console.log(resp)
    wepy.showToast({
      title: '发布成功'
    })
    wx.navigateBack(1)
  }
}
</script>
