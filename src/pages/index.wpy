<style lang="less">
// .index {
//   position: relative;
// }

.swiper {
  height: 348rpx;
}

.slide-image {
  width: 100%;
  height: 100%;
}

.nav_list {
  color: #404040;
  display: flex;
  font-size: 26rpx;
  justify-content: space-between;
  padding: 17rpx 50rpx;
  navigator {
    text-align: center
  }
  .nav_icon {
    height: 80rpx;
    margin: 0 auto;
    width: 80rpx;
    margin-bottom: 14rpx;
  }
  .nav_text {
    font-size: 26rpx
  }
}

.recorder-dialog {
  display: flex;
  justify-content: center;
  background-color: rgba(0, 0, 0, 0.5);
  width: 100%;
  height: 100%;
  top: 0px;
  position: fixed;

  .recorder {
    margin-top: 60%;
  }
}

.recorder-btn {
  position: fixed;
  bottom: 15px;
  right: 15px;
  width: 64px;
  height: 64px;
  border-radius: 100%;
  background-color: red;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 30rpx;
  color: white;
  z-index: 1000;
}

</style>

<template>
  <view class="container">

    <swiper class="swiper" indicator-active-color="{{indicatorActiveColor}}" indicator-dots="{{indicatorDots}}" autoplay="{{autoplay}}" interval="{{interval}}" duration="{{duration}}" circular="true">
      <block wx:for="{{bannerList}}" wx:key="key">
        <swiper-item>
          <image src="{{item.cover}}" class="slide-image" @tap="goToAdvert({{item.targetUrl}})" />
        </swiper-item>
      </block>
    </swiper>

    <view class="nav_list">
      <navigator open-type="navigate" url="/pages/node?name=life">
        <image src="../images/icon_life_48.png" class="nav_icon"></image>
        <view class="nav_text">生活</view>
      </navigator>
      <navigator open-type="navigate" url="/pages/node?name=laugh">
        <image src="../images/icon_world_48.png" class="nav_icon"></image>
        <view class="nav_text">自然</view>
      </navigator>
      <navigator open-type="navigate" url="/pages/node?name=laugh">
        <image src="../images/icon_animal_48.png" class="nav_icon"></image>
        <view class="nav_text">人物</view>
      </navigator>
      <navigator open-type="navigate" url="/pages/node?name=laugh">
        <image src="../images/icon_laugh_48.png" class="nav_icon"></image>
        <view class="nav_text">搞笑</view>
      </navigator>
    </view>
    <!--发现好商品模块-->
    <view class="subject_grid">
      <!--矩阵商品列表模块-->
      <higrid :purchasetype.sync="purchasetype" :list.sync="voiceList"></higrid>
      <!--加载更多时动画-->
      <bottomLoadMore :show.sync="showLoading" message="正在加载"></bottomLoadMore>
      <!--暂无数据显示-->
      <!-- <placeholder :show.sync="is_empty" message="暂无发现数据"></placeholder> -->
    </view>
    <view class="recorder-dialog" style="{{showRecorder?'display: block':'display:none'}}">
      <recorder class="recorder" :pleaseRecord.sync="showRecorder"/>
    </view>
    <view class="recorder-btn" animation="{{animationData}}" @tap="stopRecord" @longpress="record">{{recorderBtnName}}</view>
  </view>
</template>

<script>
  import wepy from 'wepy'

  import api from '../api/api'

  import testMixin from '../mixins/test'
  import Recorder from '../components/recorder'
  import Higrid from '../components/higrid'
  import BottomLoadMore from '../components/common/bottomLoadMore'

  console.log('moduleA ignored: ', 'moduleA') // => moduleA ignored: {}

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: 'Hivoice'
    }
    components = {
      bottomLoadMore: BottomLoadMore,
      higrid: Higrid,
      recorder: Recorder
    }

    mixins = [testMixin]

    data = {
      recorderBtnName: '漏一嘴',
      bannerList: [],
      voiceList: [],
      showRecorder: false,
      animationData: {}
    }

    computed = {}

    methods = {
      goToAdvert(url) {
        console.log("url===" + url)
        if (url.length === 0) {
          return
        }
        wepy.navigateTo({
          url: url
        })
      },
      stopRecord(res) {
        if (this.showRecorder) {
          this.showRecorder = false
          this.recorderBtnName = "漏一嘴"

          let animation = wepy.createAnimation({
            duration: 1000,
            timingFunction: 'ease'
          })

          this.animation = animation

          animation.scale(1, 1).rotate(0).step()

          this.animationData = animation.export()
        }
      },
      record(res) {
        if (this.showRecorder) {
          return
        }
        this.showRecorder = true

        let animation = wepy.createAnimation({
          duration: 2000,
          timingFunction: 'ease'
        })

        this.animation = animation

        animation.scale(2, 2).rotate(45).translate(20).step()

        this.animationData = animation.export()

        // setTimeout(() => {
        // console.log("hi", this)
        // animation.translate(20).step()
        // this.animationData = animation.export()
        this.recorderBtnName = "停止"
        // }, 1000)
      }
    }

    events = {}

    onLoad() {
      let that = this
      that.fetchVoiceList()
      this.fetchBannerList()
    }

    onReachBottom() {
      let that = this
      that.showLoading = true
      console.log(that.page_total + "===" + that.currentPage) // 判断总页数是否大于翻页数
      let trueLoadingMore = true
      if (trueLoadingMore || (that.page_total) > that.currentPage) { // 防止重复加载
        if (that.preventRepeatReuqest) {
          return true
        }
        that.preventRepeatReuqest = true
        that.currentPage++
        that.fetchVoiceList(that.currentPage)
        that.preventRepeatReuqest = false
      } else {
        that.showLoading = false
      }
    }

    async fetchBannerList() {
      const json = await api.getBannerList({
        query: {}
      })
      if (json.data.code === 0) {
        this.bannerList = json.data.result
        this.$apply()
      } else {}
    }

    async fetchVoiceList(currentPage, size) {
      let that = this
      const json = await api.getVoiceList({
        query: {
          page: currentPage || 1,
          size: size || 10
        }
      })
      console.log(json)
      if (json.data.code === 0) {
        that.voiceList = [...that.voiceList, ...json.data.result]

        if (json.data.result.size === 0) { // 暂无数据
          that.is_empty = true
        }
        that.$apply()
      } else {
        // tip.error(json.data.msg)
      }
      that.showLoading = false
    }
  }
</script>
