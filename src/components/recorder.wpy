<template>
  <view class="mainer">
    <view class="voice-style" @tap="switchRecord">
      <image class="bg-style" src="../images/icon_voice_speaking_bg_normal.png"></image>
      
      <image class="bg-style" animation="{{speakingAnimation}}" src="../images/voice_video_loading_0.png"></image>
      <image class="bg-style" animation="{{speakingAnimation_1}}" src="../images/voice_video_loading_0.png"></image>
      <image class="bg-style" animation="{{speakingAnimation_2}}" src="../images/voice_video_loading_0.png"></image>

      <image class="sound-style" src="../images/icon_voice_speech_sound_1.png"></image>
      <image style="{{j==2?'display:block': 'display:none'}}" class="sound-style" src="../images/icon_voice_speech_sound_2.png"></image>
      <image style="{{j==3?'display:block': 'display:none'}}" class="sound-style" src="../images/icon_voice_speech_sound_3.png"></image>
      <image style="{{j==4?'display:block': 'display:none'}}" class="sound-style" src="../images/icon_voice_speech_sound_4.png"></image>
      <image style="{{j==5?'display:block': 'display:none'}}" class="sound-style" src="../images/icon_voice_speech_sound_5.png"></image>
    </view>
    <view class="worder">
      <text style="color: white; font-size: 20px; font-weight: bold;">跟我一起念：</text>
      <text style="color: white;">
        “床前明月光，疑是地上霜，举头望明月，低头思故乡”
      </text>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy'
import qiniuUploader from "../utility/qiniuUploader"
import api from '../api/api'

const options = {
  duration: 600000,
  sampleRate: 44100,
  numberOfChannels: 1,
  encodeBitRate: 192000,
  format: 'mp3',
  frameSize: 50
}

const recorderManager = wepy.getRecorderManager()

export default class Recorder extends wepy.component {
  props = {
    voiceUrl: String
  }

  data = {
    j: 1,
    voiceUrl: "",
    speaking: false,
    speakingAnimation: {},
    speakingAnimation_1: {},
    uptoken: "",
    upkey: "",
    updomain: ""
  }

  events = {

  }

  methods = {
  }

  onLoad() {
    this.fetchUptoken()
    recorderManager.onStart(() => {
      console.log('recorder start')
    })
    recorderManager.onResume(() => {
      console.log('recorder resume')
    })
    recorderManager.onPause(() => {
      console.log('recorder pause')
    })
    recorderManager.onStop((res) => {
      console.log(res)
      // this.twoWayvoiceUrl = res.tempFilePath
      // 交给七牛上传
      wepy.showLoading({title: '正在生成音频文件'})
      qiniuUploader.upload(res.tempFilePath, (resp) => {
        this.voiceUrl = resp.imageURL
        this.$apply()
        this.$emit("stoped", this.voiceUrl)
        wepy.hideLoading()
        console.log('recorder stop', this.voiceUrl)
      }, (error) => {
        console.log('error: ' + error)
      }, {
        region: 'SCN',
        domain: "http://" + this.updomain, // // bucket 域名，下载资源时用到。如果设置，会在 success callback 的
        uptoken: this.uptoken, // 由其他程序生成七牛 uptoken
        uptokenURL: 'UpTokenURL.com/uptoken' // 从指定 url 通过 HTTP GET 获取 uptoken，返回的格式必须是 json 且包含 uptoken 字段，例如： {"uptoken": "[yourTokenString]"}
        // uptokenFunc: => {return '[yourTokenString]'}
      }, (resp) => {
        console.log('上传进度', resp.progress)
        console.log('已经上传的数据长度', resp.totalBytesSent)
        console.log('预期需要上传的数据总长度', resp.totalBytesExpectedToSend)
      })
    })
    recorderManager.onFrameRecorded((res) => {
      const { frameBuffer } = res
      console.log('frameBuffer.byteLength', frameBuffer.byteLength)
    })
    recorderManager.onError((res) => {
      console.log('recorder error', res)
    })
  }

  async fetchUptoken() {
    const resp = await api.getUptoken()

    this.uptoken = resp.token
    this.upkey = resp.key
    this.updomain = resp.domain
    this.$apply()
  }

  startRecord() {
    let that = this
    that.speak()
    that.speaking = true
    recorderManager.start(options)
  }

  stopRecord() {
    let that = this
    clearInterval(that.timer)
    that.speaking = false
    that.j = 1
    recorderManager.stop()
  }

  switchRecord() {
    let that = this
    if (!that.speaking) {
    } else {
    }
  }

  speak() {
    let that = this

    let i = 1
    this.timer = setInterval(() => {
      i++
      i = i % 5
      this.j = i
      this.$apply()
    }, 300)

    let animation = wepy.createAnimation({
      duration: 1000
    }) // 动画放大效果

    animation.opacity(0).scale(3, 3).step()
    this.speakingAnimation = animation.export()

    setTimeout(() => {
      let animation = wepy.createAnimation({
        duration: 1000
      }) // 动画放大效果
      animation.opacity(0).scale(3, 3).step() // 放大淡出
      that.speakingAnimation_1 = animation.export()
      this.$apply()
    }, 2000) // 以上动画执行完成后执行后续动画

    setTimeout(() => {
      console.log("1", 2)
      let animation = wepy.createAnimation({
        duration: 1000
      })
      animation.opacity(0).scale(3, 3).step() // 放大淡出
      that.speakingAnimation_2 = animation.export()
      this.$apply()
    }, 3000)
  }
}

</script>
<style lang="less">
  .mainer {
    display: flex;
    flex-direction: column;
    .worder {
      display: flex;
      flex-direction: column;
      justify-content: center;
      margin-top: 200px;
      align-items: center;
    }
  }
  .voice-style {
    display: flex;
    position: relative;
    flex-direction: column;
    align-items: center;
  }

  .bg-style {
    position: absolute;
    width: 100px;
    height: 100px;
  }

  .sound-style {
    position: absolute;
    width: 37.6px;
    height: 60px;
    margin-top: 20px;
  }
</style>
