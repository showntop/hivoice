<template>
  <view class="voice-style" @tap="switchRecord">
    <image class="bg-style" src="../images/icon_voice_speaking_bg_normal.png"></image>
    
    <image class="bg-style" animation="{{speakingAnimation}}" src="../images/voice_video_loading_0.png"></image>
    <image class="bg-style" animation="{{speakingAnimation_1}}" src="../images/voice_video_loading_0.png"></image>
    <image class="bg-style" animation="{{speakingAnimation_2}}" src="../images/voice_video_loading_0.png"></image>

    <image class="sound-style" src="../images/icon_voice_speech_sound_1.png"></image>
    <image style="{{j==2?'display:block': 'display:none'}}" class="sound-style" src="../images/icon_voice_speech_sound_2.png"></image>
    <image style="{{j==3?'display:block': 'display:none'}}" class="sound-style" src="../images/icon_voice_speech_sound_3.png"></image>
    <image style="{{j==4?'display:block': 'display:none'}}" class="sound-style" src="../images/icon_voice_speech_sound_4.png"></image>
    <image style="{{j==5?'display:block': 'display:none'}}" class="sound-style" src="../images/icon_voice_speech_sound_5.png"></image>
  </view>
</template>
<script>
import wepy from 'wepy'

const options = {
  duration: 10000,
  sampleRate: 44100,
  numberOfChannels: 1,
  encodeBitRate: 192000,
  format: 'aac',
  frameSize: 50
}

const recorderManager = wepy.getRecorderManager()

export default class Recorder extends wepy.component {
  props = {
    recordFile: String
    // twoWayRecordFile: {
    //   type: String,
    //   default: 'nothing',
    //   twoWay: true
    // }
  }

  data = {
    j: 1,
    recordFile: "",
    // twoWayRecordFile: "",
    speaking: false,
    speakingAnimation: {},
    speakingAnimation_1: {}
  }

  events = {

  }

  methods = {
  }

  watch = {
    // pleaseRecord(newValue, oldValue) {
    //   console.log(`num value: ${oldValue} -> ${newValue}`)
    //   if (this.pleaseRecord) {
    //     this.switchRecord()
    //   }
    // }
  }

  onLoad() {
    console.log("load")
    recorderManager.onStart(() => {
      console.log('recorder start')
    })
    recorderManager.onResume(() => {
      console.log('recorder resume')
    })
    recorderManager.onPause(() => {
      console.log('recorder pause')
    })
    recorderManager.onStop((res) => {
      this.recordFile = res.tempFilePath
      // this.twoWayRecordFile = res.tempFilePath
      this.$apply()
      this.$emit("stoped", res)
      console.log('recorder stop', res)
    })
    recorderManager.onFrameRecorded((res) => {
      const { frameBuffer } = res
      // this.voiceFilePath = res.tempFilePath
      // this.twoWayRecordFile = res.tempFilePath
      // this.$apply()
      console.log('frameBuffer.byteLength', frameBuffer.byteLength)
    })
    recorderManager.onError((res) => {
      console.log('recorder error', res)
      this.$parent.getUserInfo()
    })
  }

  startRecord() {
    let that = this
    that.speak()
    that.speaking = true
    recorderManager.start(options)
  }

  stopRecord() {
    let that = this
    clearInterval(that.timer)
    that.speaking = false
    that.j = 1
    recorderManager.stop()
  }

  switchRecord() {
    let that = this
    if (!that.speaking) {
    } else {
    }
  }

  speak() {
    let that = this

    let i = 1
    this.timer = setInterval(() => {
      i++
      i = i % 5
      this.j = i
      this.$apply()
    }, 300)

    let animation = wepy.createAnimation({
      duration: 1000
    }) // 动画放大效果

    animation.opacity(0).scale(3, 3).step()
    this.speakingAnimation = animation.export()

    setTimeout(() => {
      let animation = wepy.createAnimation({
        duration: 1000
      }) // 动画放大效果
      animation.opacity(0).scale(3, 3).step() // 放大淡出
      that.speakingAnimation_1 = animation.export()
      this.$apply()
    }, 2000) // 以上动画执行完成后执行后续动画

    setTimeout(() => {
      console.log("1", 2)
      let animation = wepy.createAnimation({
        duration: 1000
      })
      animation.opacity(0).scale(3, 3).step() // 放大淡出
      that.speakingAnimation_2 = animation.export()
      this.$apply()
    }, 3000)
  }
}

</script>
<style lang="less">
  .voice-style {
    display: flex;
    position: relative;
    flex-direction: column;
    align-items: center;
  }

  .bg-style {
    position: absolute;
    width: 100px;
    height: 100px;
  }

  .sound-style {
    position: absolute;
    width: 37.6px;
    height: 60px;
    margin-top: 20px;
  }
</style>
